/*
Macro Synopsis: Data Enhancement and Insight Generation

The "PreliminaryRequirements_Transform" Excel VBA macro offers 
a practical solution to enhance data quality and facilitate 
insightful analysis. This macro streamlines the preparation of CSV
files, ensuring consistent data treatment and introducing 
calculated columns for meaningful insights.

Key Features:

Efficient Data Standardization:
This macro simplifies the data preparation process for CSV files.
Each file undergoes systematic data standardization, ensuring 
uniform treatment. Column types, such as date/time and text, are
aligned for consistency. Precise numeric formats are applied to 
specific columns for accurate representation.

Enhanced Analysis with Calculated Columns:
The macro introduces calculated columns to enrich analysis.
The "ride_length" column captures ride durations in hours, 
aiding ride duration insights. Additional columns, "day_of_week" 
and "name_of_day," offer enhanced day analysis.
Numeric day representations are transformed into corresponding 
day names for easier interpretation.

User-Friendly Formatting:
Column widths are adjusted for improved data readability upon opening.
The entire worksheet is automatically formatted to fit the data comfortably.
Columns are set to a width of 20, optimizing the user's data viewing experience.

Streamlined CSV Saving:
Processed files are saved in CSV format to the designated destination folder.
This streamlined process ensures data integrity and compatibility.
No changes are saved to the original CSV files, maintaining data accuracy.

Value Proposition:
The macro demonstrates Excel VBA proficiency, emphasizing practical 
data transformation skills. Its efficient management of CSV files 
supports data preprocessing tasks, showcasing capabilities in 
real-world data manipulation and analysis. This macro exemplifies 
readiness for data-centric projects.
*/

Sub PreliminaryRequirements_Transform()
    Dim folderPath As String
    Dim filePath As String
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim rng As Range
    Dim processedFiles As New Collection
    
    ' Specify the source folder path where the CSV files are located
    folderPath = "D:\raw\"
    
    ' Specify the destination folder path for saving CSV files
    Dim csvDestinationFolderPath As String
    csvDestinationFolderPath = "D:\phase_one_transform\"

    ' Get the first CSV file in the folder
    filePath = Dir(folderPath & "*.csv")
    
    Do While filePath <> ""
        ' Construct the full file path
        Dim fullFilePath As String
        fullFilePath = folderPath & filePath
        
        ' Check if the file has already been processed
        Dim alreadyProcessed As Boolean
        On Error Resume Next
        processedFiles.Add Item:=filePath, Key:=CStr(filePath)
        alreadyProcessed = (Err.Number = 0)
        Err.Clear
        On Error GoTo 0
        
        If Not alreadyProcessed Then
        ' Open the CSV file
        Set wb = Workbooks.Open(fullFilePath)
            
                     
        ' CLEANING DATA AND SETTING DATA TYPES
        
            
        ' Clean the data types
        Set ws = wb.Worksheets(1) ' Assuming the data is on the first sheet

                   
        ' Clean data types in column A as text
        Set rng = ws.Range("A:A")
        rng.NumberFormat = "@"
        
        ' Clean data types in column B as text
        Set rng = ws.Range("B:B")
        rng.NumberFormat = "@"
        
        ' Clean data types in column C as date/time
        Set rng = ws.Range("C:C")
        rng.NumberFormat = "mm/dd/yyyy hh:mm:ss"
        
        ' Clean data types in column D as date/time
        Set rng = ws.Range("D:D")
        rng.NumberFormat = "mm/dd/yyyy hh:mm:ss"
        
        ' Clean data types in column E as text
        Set rng = ws.Range("E:E")
        rng.NumberFormat = "@"
        
        ' Clean data types in column F as text
        Set rng = ws.Range("F:F")
        rng.NumberFormat = "@"
        
        ' Clean data types in column G as text
        Set rng = ws.Range("G:G")
        rng.NumberFormat = "@"
        
        ' Clean data types in column H as text
        Set rng = ws.Range("H:H")
        rng.NumberFormat = "@"
        
        ' Clean data types in column I as number with 12 decimal places
        Set rng = ws.Range("I:I")
        rng.NumberFormat = "0.000000000000"
        
        ' Clean data types in column J as number with 12 decimal places
        Set rng = ws.Range("J:J")
        rng.NumberFormat = "0.000000000000"
        
        ' Clean data types in column K as number with 12 decimal places
        Set rng = ws.Range("K:K")
        rng.NumberFormat = "0.000000000000"
        
        ' Clean data types in column L as number with 12 decimal places
        Set rng = ws.Range("L:L")
        rng.NumberFormat = "0.000000000000"
        
        ' Clean data types in column M
        Set rng = ws.Range("M:M")
        rng.NumberFormat = "@" ' Set the format to text
        
        
        ' INSERTING COLUMNS AND PERFORMING CALCULATIONS
        
        ' ADDING COLUMN "ride_length"
        
        ' Get the last row in the column containing data
        Dim LastRow As Long
        LastRow = ws.Cells(ws.Rows.Count, "C").End(xlUp).Row

        ' Add a new column "ride_length" in column N
        ws.Range("N1").Value = "ride_length"

        ' Perform calculation and copy formula down
        ws.Range("N2:N" & LastRow).Formula = "=D2-C2"
           
        
        ' ADDING COLUMN(s) "day_of_week" & "name_of_day"
                
        ' Add a new column "day_of_week" in column O
        ws.Range("O1").Value = "day_of_week"

        ' Perform calculation and format as desired
        ws.Range("O2:O" & LastRow).Formula = "=WEEKDAY(C2,1)"
        ws.Range("O2:O" & LastRow).NumberFormat = "0" ' Format as number with no decimals
        
        
        ' Add a new column "name_of_day" in column O
        ws.Range("P1").Value = "name_of_day"
        
        ' Replace numeric weekday with day names
        ws.Range("P2:P" & LastRow).FormulaR1C1 = "=CHOOSE(WEEKDAY(RC3,1),""Sunday"",""Monday"",""Tuesday"",""Wednesday"",""Thursday"",""Friday"",""Saturday"")"
        
        ' Format as desired (optional)
        ws.Range("P2:P" & LastRow).NumberFormat = "@" ' Format as text
        
        ' AutoFit all columns
        ws.UsedRange.Columns.AutoFit
        
                       
        ' SAVING IN CSV FORMAT
            
        ' Save the workbook in CSV format to the CSV destination folder
        wb.SaveAs FileName:=csvDestinationFolderPath & Replace(wb.Name, ".csv", ".csv"), FileFormat:=xlCSV
            
        ' Close the workbook without saving changes
        wb.Close SaveChanges:=False
            
        ' Get the next CSV file
        filePath = Dir ' Get the next CSV file
    End If
Loop
    
    ' Display a message box indicating success after the loop
    MsgBox "Data types cleaned and files saved successfully!"
End Sub

